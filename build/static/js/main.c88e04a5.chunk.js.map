{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","Todo","todos","removeTodo","updateTodo","setEdit","Fragment","map","todo","index","key","TodoList","localStorage","getItem","JSON","parse","setTodos","setItem","stringify","test","newTodos","console","log","removedArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","document","getElementById"],"mappings":"6OA8DeA,MA5Df,SAAkBC,GAChB,MAA0BC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAAnE,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAExBC,qBAAU,WACRF,EAASG,QAAQC,WAGnB,IAAMC,EAAe,SAAAC,GACnBP,EAASO,EAAEC,OAAOV,QAGdW,EAAe,SAAAF,GACnBA,EAAEG,iBAEFf,EAAMgB,SAAS,CACbC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAERC,EAAS,KAKX,OACE,0BAAMW,SAAUF,EAAcQ,UAAU,aACrCtB,EAAME,KACL,oCACE,2BACEqB,YAAY,mBACZpB,MAAOC,EACPoB,SAAUb,EACVc,KAAK,OACLC,IAAKpB,EACLgB,UAAU,oBAEZ,4BAAQK,QAASb,EAAcQ,UAAU,oBAAzC,WAKF,oCACE,2BACEC,YAAY,aACZpB,MAAOC,EACPoB,SAAUb,EACVc,KAAK,OACLH,UAAU,aACVI,IAAKpB,IAEP,4BAAQqB,QAASb,EAAcQ,UAAU,eAAzC,e,cCDKM,EA/CF,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,WAEjC,EAAwB9B,mBAAS,CAC/BgB,GAAI,KACJd,MAAO,KAFT,mBAAOD,EAAP,KAAa8B,EAAb,KAaA,OAAI9B,EAAKe,GACA,kBAAC,EAAD,CAAUf,KAAMA,EAAMc,SATV,SAAAb,GACnB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACNf,GAAI,KACJd,MAAO,QAST,kBAAC,IAAM8B,SAAP,KACDJ,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACT,yBACEd,UAAW,WACXe,IAAKD,GAEL,yBAAKC,IAAKF,EAAKlB,IACZkB,EAAKd,MAER,yBAAKC,UAAU,SACb,kBAAC,IAAD,CACEK,QAAS,kBAAMG,EAAWK,EAAKlB,KAC/BK,UAAU,gBAEZ,kBAAC,IAAD,CACEK,QAAS,kBAAMK,EAAQ,CAAEf,GAAIkB,EAAKlB,GAAId,MAAOgC,EAAKd,QAClDC,UAAU,qBCuBLgB,MAjDf,WAEE,MAA0BrC,mBAZdsC,aAAaC,QAAQ,SAExBC,KAAKC,MAAMH,aAAaC,QAAQ,UAIhC,IAMT,mBAAOX,EAAP,KAAcc,EAAd,KAmCA,OAjCInC,qBAAU,WACZ+B,aAAaK,QAAQ,QAASH,KAAKI,UAAUhB,MAE5C,CAACA,IA+BF,oCACE,0DACA,kBAAC,EAAD,CAAUb,SA/BE,SAAAmB,GAAS,IAAD,EACtB,GAAKA,EAAKd,OAAQ,QAAQyB,KAAKX,EAAKd,MAApC,CAIA,IAAM0B,EAAQ,CAAIZ,GAAJ,mBAAaN,IAE3Bc,EAASI,IAET,EAAAC,SAAQC,IAAR,oBAAepB,QAuBb,kBAAC,EAAD,CACEA,MAAOA,EACPC,WAZa,SAAAb,GACjB,IAAMiC,EAAa,YAAIrB,GAAOsB,QAAO,SAAAhB,GAAI,OAAIA,EAAKlB,KAAOA,KAEzD0B,EAASO,IAULnB,WArBa,SAACqB,EAAQC,GACrBA,EAAShC,OAAQ,QAAQyB,KAAKO,EAAShC,OAI5CsB,GAAS,SAAAW,GAAI,OAAIA,EAAKpB,KAAI,SAAAqB,GAAI,OAAKA,EAAKtC,KAAOmC,EAASC,EAAWE,aC/BxDC,MARf,WACE,OACE,yBAAKlC,UAAU,YACb,kBAAC,EAAD,QCHNmC,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.c88e04a5.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction TodoForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\n\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleChange = e => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n   \n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input\n    });\n    setInput('');\n  };\n\n\n\n  return (\n    <form onSubmit={handleSubmit} className='todo-form'>  \n      {props.edit ? (\n        <>\n          <input\n            placeholder='Update your item'\n            value={input}\n            onChange={handleChange}\n            name='text'\n            ref={inputRef}\n            className='todo-input edit'\n          />\n          <button onClick={handleSubmit} className='todo-button edit'>\n            Update\n          </button>\n        </>\n      ) : (\n        <>\n          <input\n            placeholder='Add a todo'\n            value={input}\n            onChange={handleChange}\n            name='text'\n            className='todo-input'\n            ref={inputRef}\n          />\n          <button onClick={handleSubmit} className='todo-button'>\n            Add todo\n          </button>\n        </>\n      )}\n    </form>\n  );\n}\n\nexport default TodoForm;\n","import React, { useState } from 'react';\nimport TodoForm from './TodoForm';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\n\nconst Todo = ({ todos, removeTodo, updateTodo}) => {\n \n  const [edit, setEdit] = useState({\n    id: null,\n    value: ''\n});\n\n  const submitUpdate = value => {\n    updateTodo(edit.id, value);\n    setEdit({\n      id: null,\n      value: ''\n    });\n  };\n\n  if (edit.id) {\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return (\n    <React.Fragment>\n  {todos.map((todo, index) => (\n    <div\n      className={'todo-row'}\n      key={index}\n    >\n      <div key={todo.id} >\n        {todo.text}\n      </div>\n      <div className='icons'>\n        <RiCloseCircleLine\n          onClick={() => removeTodo(todo.id)}\n          className='delete-icon'\n        />\n        <TiEdit\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\n          className='edit-icon'\n        />\n      </div>\n    </div>\n  ))}\n  </React.Fragment>\n  )\n   \n  \n};\n\nexport default Todo;\n","import React, { useState, useEffect } from 'react';\nimport TodoForm from './TodoForm';\nimport Todo from './Todo';\n\nconst savedTodoItem = () => {\n  let lists = localStorage.getItem(\"todos\");\n  if (lists) {\n    return JSON.parse(localStorage.getItem(\"todos\"));\n    \n  } else {\n    \n    return [];\n}\n}\n\nfunction TodoList() {\n    \n  const [todos, setTodos] = useState(savedTodoItem());\n\n      useEffect(() => {\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n   \n  }, [todos])\n\n  const addTodo = todo => {\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\n      return;\n    }\n\n    const newTodos = [todo, ...todos];\n\n    setTodos(newTodos);\n  \n    console.log(...todos);\n    \n\n  };\n\n  const updateTodo = (todoId, newValue) => {\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\n      return;\n    }\n\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\n  };\n\n  const removeTodo = id => {\n    const removedArr = [...todos].filter(todo => todo.id !== id);\n\n    setTodos(removedArr);\n  };\n\n  return (\n    <>\n      <h1>What's the Plan for Today?</h1>\n      <TodoForm onSubmit={addTodo} />\n      <Todo\n        todos={todos} \n        removeTodo={removeTodo}\n        updateTodo={updateTodo}\n      />\n    </>\n  );\n}\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  \n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}